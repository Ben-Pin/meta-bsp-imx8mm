From 54662c166b72bec006e0385ba20718c7bb7f4c63 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Thu, 2 Jul 2020 15:04:35 +0300
Subject: [PATCH 51/52] mcm-imx8m-mini: Fix basic support #1

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.c | 123 ++++++++++++++++++-------
 board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.h |   7 ++
 board/compulab/mcm-imx8m-mini/spl.c            |  15 +--
 3 files changed, 106 insertions(+), 39 deletions(-)

diff --git a/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.c b/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.c
index e5a5682294..598030ac01 100644
--- a/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.c
+++ b/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.c
@@ -56,6 +56,8 @@ int board_early_init_f(void)
 
 	imx_iomux_v3_setup_multiple_pads(uart_pads, ARRAY_SIZE(uart_pads));
 
+	init_uart_clk(2);
+
 	return 0;
 }
 
@@ -66,27 +68,23 @@ int board_postclk_init(void)
 	return 0;
 }
 #endif
-
-static phys_size_t imx8_ddr_size(void)
+int board_phys_sdram_size(phys_size_t *size)
 {
-    unsigned long value = readl(TCM_DATA_CFG);
-    phys_size_t dram_size = 0x40000000;;
-
-    switch (value) {
-    case 4096:
-    case 3072:
-    case 2048:
-    case 1536:
-    case 1024:
-    case 768:
-    case 512:
-    case 256:
-        dram_size = ( value << 20 );
-        break;
-    default:
-        break;
-    };
-    return dram_size;
+	struct lpddr4_tcm_desc *lpddr4_tcm_desc = (struct lpddr4_tcm_desc *) TCM_DATA_CFG;
+
+	switch (lpddr4_tcm_desc->size) {
+	case 4096:
+	case 2048:
+	case 1024:
+		*size = (1L << 20) * lpddr4_tcm_desc->size;
+		break;
+	default:
+		printf("%s: DRAM size %uM is not supported \n", __func__,
+				lpddr4_tcm_desc->size);
+		while ( 1 ) {};
+		break;
+	};
+	return 0;
 }
 	/* Get the top of usable RAM */
 ulong board_get_usable_ram_top(ulong total_size)
@@ -100,33 +98,94 @@ ulong board_get_usable_ram_top(ulong total_size)
 
 int dram_init(void)
 {
-	gd->ram_size =imx8_ddr_size() - rom_pointer[1];
+	phys_size_t sdram_size;
+	int ret;
+	ret = board_phys_sdram_size(&sdram_size);
+	printf("%s: size %llu\n", __func__, sdram_size);
+	if (ret)
+		return ret;
+
+	/* rom_pointer[1] contains the size of TEE occupies */
+	gd->ram_size = sdram_size - rom_pointer[1];
+
 	return 0;
 }
 
 int dram_init_banksize(void)
 {
-	phys_size_t ddr_size = imx8_ddr_size();
+	int bank = 0;
+	int ret;
+	phys_size_t total_size, bank_1_size, bank_2_size;
+
+	ret = board_phys_sdram_size(&total_size);
+	if (ret)
+		return ret;
+
+	switch (total_size) {
+		case 4 * (1L << 30):
+			bank_1_size = 3 * (1L << 30);
+			bank_2_size = 1 * (1L << 30);
+			break;
+		default:
+			bank_1_size = total_size;
+			bank_2_size = 0;
+			break;
+	}
+
+	gd->bd->bi_dram[bank].start = PHYS_SDRAM;
+	gd->bd->bi_dram[bank].size = bank_1_size;
+
+	if (rom_pointer[1]) {
+		phys_addr_t optee_start = (phys_addr_t)rom_pointer[0];
+		phys_size_t optee_size = (size_t)rom_pointer[1];
+
+
+		if ((optee_start + optee_size) < (PHYS_SDRAM + bank_1_size)) {
 
-	gd->bd->bi_dram[0].start = PHYS_SDRAM;
-	gd->bd->bi_dram[1].start = PHYS_SDRAM_2;
+			gd->bd->bi_dram[bank].size = optee_start - gd->bd->bi_dram[bank].start;
+
+			if ( ++bank >= CONFIG_NR_DRAM_BANKS) {
+				puts("CONFIG_NR_DRAM_BANKS is not enough\n");
+				return -1;
+			}
+
+			gd->bd->bi_dram[bank].start = optee_start;
+			gd->bd->bi_dram[bank].size = PHYS_SDRAM +
+				bank_1_size - gd->bd->bi_dram[bank].start;
+		}
+		else {
+			printf("%s: There is no room to allocate TEE 0x%16.16llx @ 0x%16.16llx\n", __func__, optee_size, optee_start);
+		}
 
-	if((4096l << 20) == ddr_size){
-		gd->bd->bi_dram[0].size = (phys_size_t)3 * 0x40000000;
-		gd->bd->bi_dram[1].size = (phys_size_t)1 * 0x40000000;
 	} else {
-		gd->bd->bi_dram[0].size = ddr_size;
-		gd->bd->bi_dram[1].size = 0;
+		gd->bd->bi_dram[bank].size = bank_1_size;
 	}
 
-	gd->bd->bi_dram[0].size -= rom_pointer[1];
-
+	if(bank_2_size) {
+		if ( ++bank >= CONFIG_NR_DRAM_BANKS) {
+			puts("CONFIG_NR_DRAM_BANKS is not enough for SDRAM_2\n");
+			return -1;
+		}
+		gd->bd->bi_dram[bank].start = PHYS_SDRAM_2;
+		gd->bd->bi_dram[bank].size = bank_2_size;
+	printf("%s:%i %lu %llu [%i] %llu\n", __func__, __LINE__, gd->bd->bi_dram[bank].start, gd->bd->bi_dram[bank].size, bank, total_size);
+	}
+	printf("%s:%i %lu %llu [%i] %llu\n", __func__, __LINE__, gd->bd->bi_dram[bank].start, gd->bd->bi_dram[bank].size, bank, total_size);
 	return 0;
 }
 
 phys_size_t get_effective_memsize(void)
 {
-	return imx8_ddr_size() - rom_pointer[1];
+	/* return the first bank as effective memory */
+	if (rom_pointer[1])
+		return ((phys_addr_t)rom_pointer[0] - PHYS_SDRAM);
+
+	switch(gd->ram_size) {
+		case 4 * (1L<<30):
+			return 3 * (1L<<30);
+		default:
+			return gd->ram_size;
+	}
 }
 
 #ifdef CONFIG_OF_BOARD_SETUP
diff --git a/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.h b/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.h
index 5017440bfe..fc59756161 100644
--- a/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.h
+++ b/board/compulab/mcm-imx8m-mini/mcm-imx8m-mini.h
@@ -9,4 +9,11 @@
 
 #define TCM_DATA_CFG 0x7e0000
 
+struct lpddr4_tcm_desc {
+	unsigned int size;
+	unsigned int sign;
+	unsigned int index;
+	unsigned int count;
+};
+
 #endif
diff --git a/board/compulab/mcm-imx8m-mini/spl.c b/board/compulab/mcm-imx8m-mini/spl.c
index a7b0a3e642..2b6056ff22 100644
--- a/board/compulab/mcm-imx8m-mini/spl.c
+++ b/board/compulab/mcm-imx8m-mini/spl.c
@@ -19,7 +19,7 @@
 #include <asm/mach-imx/mxc_i2c.h>
 #include <fsl_esdhc.h>
 #include <mmc.h>
-#include <asm/arch/imx8m_ddr.h>
+#include <asm/arch/ddr.h>
 #include "ddr/ddr.h"
 #include "mcm-imx8m-mini.h"
 
@@ -99,6 +99,7 @@ int board_mmc_init(bd_t *bis)
 	for (i = 0; i < CONFIG_SYS_FSL_USDHC_NUM; i++) {
 		switch (i) {
 		case 0:
+			init_clk_usdhc(1);
 			usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC2_CLK);
 			imx_iomux_v3_setup_multiple_pads(
 				usdhc2_pads, ARRAY_SIZE(usdhc2_pads));
@@ -108,6 +109,7 @@ int board_mmc_init(bd_t *bis)
 			gpio_direction_output(USDHC2_PWR_GPIO, 1);
 			break;
 		case 1:
+			init_clk_usdhc(2);
 			usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK);
 			imx_iomux_v3_setup_multiple_pads(
 				usdhc3_pads, ARRAY_SIZE(usdhc3_pads));
@@ -175,7 +177,7 @@ int power_init_board(void)
 	pmic_reg_write(p, BD71837_REGLOCK, 0x1);
 
 	/* decrease VDD_ARM to 0.85V for 1.2GHz operation */
-	pmic_reg_write(p, BD71837_BUCK2_VOLT_RUN, 0x0f);
+	/*pmic_reg_write(p, BD71837_BUCK2_VOLT_RUN, 0x0f);*/
 
 	/* increase VDD_SOC to 0.85V for 3Ghz DDR */
 	pmic_reg_write(p, BD71837_BUCK1_VOLT_RUN, 0x0f);
@@ -217,10 +219,12 @@ int board_fit_config_name_match(const char *name)
 void board_init_f(ulong dummy)
 {
 	int ret;
+	/* Clear the BSS. */
+	memset(__bss_start, 0, __bss_end - __bss_start);
 
-	/* Clear global data */
+	/* Clear global data
 	memset((void *)gd, 0, sizeof(gd_t));
-
+	*/
 	arch_cpu_init();
 
 	board_early_init_f();
@@ -229,9 +233,6 @@ void board_init_f(ulong dummy)
 
 	preloader_console_init();
 
-	/* Clear the BSS. */
-	memset(__bss_start, 0, __bss_end - __bss_start);
-
 	ret = spl_init();
 	if (ret) {
 		debug("spl_init() failed: %d\n", ret);
-- 
2.11.0

